#include "uart_judge.h"
uint8_t judge_dma_rxbuff[2][UART_RX_DMA_SIZE];
RealData Robot_Data;
void Judge_Init(void)
{
		USART_InitTypeDef uart4;
		GPIO_InitTypeDef  gpio;
		NVIC_InitTypeDef  nvic;
		DMA_InitTypeDef     DMA_InitStructure;
		//时钟初始化
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4,ENABLE);
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
		
		GPIO_PinAFConfig(GPIOC,GPIO_PinSource10,GPIO_AF_UART4);
		GPIO_PinAFConfig(GPIOC,GPIO_PinSource11,GPIO_AF_UART4); 
		//GPIO初始化
		gpio.GPIO_Pin = GPIO_Pin_10;
		gpio.GPIO_Mode = GPIO_Mode_AF;
		gpio.GPIO_OType = GPIO_OType_PP;
		gpio.GPIO_Speed = GPIO_Speed_100MHz;
		gpio.GPIO_PuPd = GPIO_PuPd_UP;
		GPIO_Init(GPIOC,&gpio);
		
		gpio.GPIO_Pin = GPIO_Pin_11;
		gpio.GPIO_Mode = GPIO_Mode_AF;
		gpio.GPIO_OType = GPIO_OType_OD;
		gpio.GPIO_Speed = GPIO_Speed_100MHz;
		gpio.GPIO_PuPd = GPIO_PuPd_NOPULL ;
		GPIO_Init(GPIOC,&gpio);
	
	  //UARST初始化
	  uart4.USART_BaudRate = 115200;
	  uart4.USART_WordLength = USART_WordLength_8b;
	  uart4.USART_StopBits = USART_StopBits_1;
	  uart4.USART_Parity = USART_Parity_No;
	  uart4.USART_Mode = USART_Mode_Tx|USART_Mode_Rx;
	  uart4.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	  USART_Init(UART4,&uart4);
	  USART_DMACmd(UART4, USART_DMAReq_Rx, ENABLE);
	  USART_DMACmd(UART4, USART_DMAReq_Tx, ENABLE);
	  USART_Cmd(UART4,ENABLE);
	 
	 //DMA  RX
		DMA_InitStructure.DMA_Channel           =   DMA_Channel_4;
		DMA_InitStructure.DMA_PeripheralBaseAddr=   (uint32_t)(&UART4->DR);
		DMA_InitStructure.DMA_Memory0BaseAddr   =   (uint32_t)judge_dma_rxbuff[0];
		DMA_InitStructure.DMA_DIR               =   DMA_DIR_PeripheralToMemory; //RX
		DMA_InitStructure.DMA_BufferSize        =   UART_RX_DMA_SIZE; //1024
		DMA_InitStructure.DMA_PeripheralInc     =   DMA_PeripheralInc_Disable;
		DMA_InitStructure.DMA_MemoryInc         =   DMA_MemoryInc_Enable;
		DMA_InitStructure.DMA_MemoryDataSize    =   DMA_MemoryDataSize_Byte;
		DMA_InitStructure.DMA_PeripheralDataSize=   DMA_PeripheralDataSize_Byte;
		DMA_InitStructure.DMA_Mode              =   DMA_Mode_Circular;   //double buffer 

		DMA_InitStructure.DMA_Priority          =   DMA_Priority_High;
		DMA_InitStructure.DMA_FIFOMode          =   DMA_FIFOMode_Disable; //
		DMA_InitStructure.DMA_FIFOThreshold     =   DMA_FIFOThreshold_Full;
		DMA_InitStructure.DMA_MemoryBurst       =   DMA_MemoryBurst_Single;
		DMA_InitStructure.DMA_PeripheralBurst   =   DMA_PeripheralBurst_Single;
		/*DMA double buffer mode*///双缓冲区模式  2018/2/24
		DMA_DoubleBufferModeConfig(DMA1_Stream2,(uint32_t)judge_dma_rxbuff[0], DMA_Memory_0);	//DMA_Memory_0首先被传输
		DMA_DoubleBufferModeCmd(DMA1_Stream2, ENABLE);
		DMA_Init(DMA1_Stream2, &DMA_InitStructure);
		DMA_Cmd(DMA1_Stream2, ENABLE);
	 //IRQ
    nvic.NVIC_IRQChannel = UART4_IRQn;
    nvic.NVIC_IRQChannelPreemptionPriority = 10;
    nvic.NVIC_IRQChannelSubPriority = 0;
    nvic.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&nvic);
		USART_ITConfig(UART4, USART_IT_IDLE, ENABLE);//使能串口空闲中断	IDLE
		//开启DMA满中断 2018/2/24
		nvic.NVIC_IRQChannel = DMA1_Stream2_IRQn;
		nvic.NVIC_IRQChannelPreemptionPriority = 11;
		nvic.NVIC_IRQChannelSubPriority = 0;
		nvic.NVIC_IRQChannelCmd = ENABLE;
		NVIC_Init(&nvic);
		 /*DMA 中断开*/  
		DMA_ITConfig(DMA1_Stream2,DMA_IT_TC,ENABLE);
}
/*****************************************************************/
void Judge_data_pass(void)
{
//  Robot_Data.Robot_Level =judge_rece_mesg.game_information.robotlevel;
//	Robot_Data.Remain_HP   =judge_rece_mesg.game_information.remain_hp;
//	Robot_Data.Shoot_Freq  =judge_rece_mesg.real_shoot_data.bullet_freq;
//	Robot_Data.Shoot_Speed =judge_rece_mesg.real_shoot_data.bullet_speed;
//	Robot_Data.Volt        =judge_rece_mesg.power_heat.chassisvolt;
//	Robot_Data.Current     =judge_rece_mesg.power_heat.chassiscurrent;
//	Robot_Data.Power       =judge_rece_mesg.power_heat.chassispower;
//	Robot_Data.Power_Buffer=judge_rece_mesg.power_heat.chassispowerbuffer;
//	Robot_Data.shooterheat =judge_rece_mesg.power_heat.shooterheat0;
}
void USART4_SendChar(unsigned char b)
{
    while (USART_GetFlagStatus(UART4,USART_FLAG_TC) == RESET); 
		USART_SendData(UART4,b);
}
void Uart_SendBuff ( uint8_t *buff, uint32_t len)
{
    while(len--)
    {
        USART4_SendChar(*buff);
        buff++;
    }
}
void Send_FrameData(tCmdID cmdid, uint8_t * pchMessage,uint8_t dwLength)
{	
	uint8_t i;
	uint8_t *addr;
	static tFrame Frame = {.FrameHeader.SOF = 0xA5};//SOF帧起始字节 0XA5
	
	if (dwLength != sizeof(tSelfDefineInfo))    //校验所发数据长度
		
		return ;
	
	addr = (uint8_t *)&Frame.Data.GameInfo; //首地址为Date中的第一个 
	
	Frame.CmdID = cmdid; //命令码
	Frame.FrameHeader.DataLength = dwLength;//帧内date长度 12
	Frame.FrameHeader.Seq++; //包序号 即第几次发送的包
	for(i = 0;i < dwLength;i++)
	{
			*addr++ = *pchMessage++;//数据拷贝
	}
	append_crc8_check_sum((unsigned char *)&Frame.FrameHeader,sizeof(Frame.FrameHeader));//帧头CRC校验
	i = sizeof(Frame.FrameHeader) + sizeof(Frame.CmdID)  + sizeof(Frame.CRC16) + dwLength;//帧长度
	append_crc16_check_sum((unsigned char *)&Frame,i); //帧尾CRC校验
  Uart_SendBuff((uint8_t *)&Frame,i);               //帧发送
}


